<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Runtime on home</title>
    <link>https://fancive.github.io/tags/go-runtime/</link>
    <description>Recent content in Go Runtime on home</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 31 May 2020 21:30:28 +0800</lastBuildDate>
    <atom:link href="https://fancive.github.io/tags/go-runtime/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go string to byte</title>
      <link>https://fancive.github.io/posts/go_string_byte/</link>
      <pubDate>Sun, 31 May 2020 21:30:28 +0800</pubDate>
      <guid>https://fancive.github.io/posts/go_string_byte/</guid>
      <description>&lt;h2 id=&#34;0x01-背景&#34;&gt;0x01 背景&lt;/h2&gt;&#xA;&lt;p&gt;最近在review其他同学代码发现将 string转[]byte的时候，得到的[]byte的容量是会变的, 比如如下一段代码的输出是32&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(cap([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;0x02-探究&#34;&gt;0x02 探究&lt;/h2&gt;&#xA;&lt;p&gt;那么这是为什么呢，首先看汇编&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;-N 禁止优化&#xA;-S 输出汇编代码&#xA;-l 禁止内联&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gcflags&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-N -l -S&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到以下代码&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;&amp;#34;.main STEXT size=293 args=0x0 locals=0xc0&#xA;&#x9;0x0000 00000 (/home/xxx/go.go:5)&#x9;TEXT&#x9;&amp;#34;&amp;#34;.main(SB), ABIInternal, $192-0&#xA;&#x9;0x0000 00000 (/home/xxx/go.go:5)&#x9;MOVQ&#x9;(TLS), CX&#xA;&#x9;0x0009 00009 (/home/xxx/go.go:5)&#x9;LEAQ&#x9;-64(SP), AX&#xA;&#x9;0x000e 00014 (/home/xxx/go.go:5)&#x9;CMPQ&#x9;AX, 16(CX)&#xA;&#x9;0x0012 00018 (/home/xxx/go.go:5)&#x9;JLS&#x9;283&#xA;&#x9;0x0018 00024 (/home/xxx/go.go:5)&#x9;SUBQ&#x9;$192, SP&#xA;&#x9;0x001f 00031 (/home/xxx/go.go:5)&#x9;MOVQ&#x9;BP, 184(SP)&#xA;&#x9;0x0027 00039 (/home/xxx/go.go:5)&#x9;LEAQ&#x9;184(SP), BP&#xA;&#x9;0x002f 00047 (/home/xxx/go.go:5)&#x9;FUNCDATA&#x9;$0, gclocals·7d2d5fca80364273fb07d5820a76fef4(SB)&#xA;&#x9;0x002f 00047 (/home/xxx/go.go:5)&#x9;FUNCDATA&#x9;$1, gclocals·4dc9e0f0c3406fbbbbd2ec99068e8282(SB)&#xA;&#x9;0x002f 00047 (/home/xxx/go.go:5)&#x9;FUNCDATA&#x9;$2, gclocals·8dcadbff7c52509cfe2d26e4d7d24689(SB)&#xA;&#x9;0x002f 00047 (/home/xxx/go.go:5)&#x9;FUNCDATA&#x9;$3, &amp;#34;&amp;#34;.main.stkobj(SB)&#xA;&#x9;0x002f 00047 (/home/xxx/go.go:6)&#x9;PCDATA&#x9;$0, $1&#xA;&#x9;0x002f 00047 (/home/xxx/go.go:6)&#x9;PCDATA&#x9;$1, $0&#xA;&#x9;0x002f 00047 (/home/xxx/go.go:6)&#x9;LEAQ&#x9;go.string.&amp;#34;abc&amp;#34;(SB), AX&#xA;&#x9;0x0036 00054 (/home/xxx/go.go:6)&#x9;MOVQ&#x9;AX, &amp;#34;&amp;#34;.s1+104(SP)&#xA;&#x9;0x003b 00059 (/home/xxx/go.go:6)&#x9;MOVQ&#x9;$3, &amp;#34;&amp;#34;.s1+112(SP)&#xA;&#x9;0x0044 00068 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $2&#xA;&#x9;0x0044 00068 (/home/xxx/go.go:7)&#x9;LEAQ&#x9;&amp;#34;&amp;#34;..autotmp_4+56(SP), CX&#xA;&#x9;0x0049 00073 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $1&#xA;&#x9;0x0049 00073 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;CX, (SP)&#xA;&#x9;0x004d 00077 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $0&#xA;&#x9;0x004d 00077 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;AX, 8(SP)&#xA;&#x9;0x0052 00082 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;$3, 16(SP)&#xA;&#x9;0x005b 00091 (/home/xxx/go.go:7)&#x9;CALL&#x9;runtime.stringtoslicebyte(SB)&#xA;&#x9;0x0060 00096 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;40(SP), AX&#xA;&#x9;0x0065 00101 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;32(SP), CX&#xA;&#x9;0x006a 00106 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $3&#xA;&#x9;0x006a 00106 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;24(SP), DX&#xA;&#x9;0x006f 00111 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $0&#xA;&#x9;0x006f 00111 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;DX, &amp;#34;&amp;#34;..autotmp_2+160(SP)&#xA;&#x9;0x0077 00119 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;CX, &amp;#34;&amp;#34;..autotmp_2+168(SP)&#xA;&#x9;0x007f 00127 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;AX, &amp;#34;&amp;#34;..autotmp_2+176(SP)&#xA;&#x9;0x0087 00135 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;AX, &amp;#34;&amp;#34;..autotmp_3+48(SP)&#xA;&#x9;0x008c 00140 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;AX, (SP)&#xA;&#x9;0x0090 00144 (/home/xxx/go.go:7)&#x9;CALL&#x9;runtime.convT64(SB)&#xA;&#x9;0x0095 00149 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $1&#xA;&#x9;0x0095 00149 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;8(SP), AX&#xA;&#x9;0x009a 00154 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $0&#xA;&#x9;0x009a 00154 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$1, $1&#xA;&#x9;0x009a 00154 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;AX, &amp;#34;&amp;#34;..autotmp_5+96(SP)&#xA;&#x9;0x009f 00159 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$1, $2&#xA;&#x9;0x009f 00159 (/home/xxx/go.go:7)&#x9;XORPS&#x9;X0, X0&#xA;&#x9;0x00a2 00162 (/home/xxx/go.go:7)&#x9;MOVUPS&#x9;X0, &amp;#34;&amp;#34;..autotmp_1+120(SP)&#xA;&#x9;0x00a7 00167 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $1&#xA;&#x9;0x00a7 00167 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$1, $1&#xA;&#x9;0x00a7 00167 (/home/xxx/go.go:7)&#x9;LEAQ&#x9;&amp;#34;&amp;#34;..autotmp_1+120(SP), AX&#xA;&#x9;0x00ac 00172 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;AX, &amp;#34;&amp;#34;..autotmp_7+88(SP)&#xA;&#x9;0x00b1 00177 (/home/xxx/go.go:7)&#x9;TESTB&#x9;AL, (AX)&#xA;&#x9;0x00b3 00179 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $2&#xA;&#x9;0x00b3 00179 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$1, $0&#xA;&#x9;0x00b3 00179 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;&amp;#34;&amp;#34;..autotmp_5+96(SP), CX&#xA;&#x9;0x00b8 00184 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $4&#xA;&#x9;0x00b8 00184 (/home/xxx/go.go:7)&#x9;LEAQ&#x9;type.int(SB), DX&#xA;&#x9;0x00bf 00191 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $2&#xA;&#x9;0x00bf 00191 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;DX, &amp;#34;&amp;#34;..autotmp_1+120(SP)&#xA;&#x9;0x00c4 00196 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $1&#xA;&#x9;0x00c4 00196 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;CX, &amp;#34;&amp;#34;..autotmp_1+128(SP)&#xA;&#x9;0x00cc 00204 (/home/xxx/go.go:7)&#x9;TESTB&#x9;AL, (AX)&#xA;&#x9;0x00ce 00206 (/home/xxx/go.go:7)&#x9;JMP&#x9;208&#xA;&#x9;0x00d0 00208 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;AX, &amp;#34;&amp;#34;..autotmp_6+136(SP)&#xA;&#x9;0x00d8 00216 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;$1, &amp;#34;&amp;#34;..autotmp_6+144(SP)&#xA;&#x9;0x00e4 00228 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;$1, &amp;#34;&amp;#34;..autotmp_6+152(SP)&#xA;&#x9;0x00f0 00240 (/home/xxx/go.go:7)&#x9;PCDATA&#x9;$0, $0&#xA;&#x9;0x00f0 00240 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;AX, (SP)&#xA;&#x9;0x00f4 00244 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;$1, 8(SP)&#xA;&#x9;0x00fd 00253 (/home/xxx/go.go:7)&#x9;MOVQ&#x9;$1, 16(SP)&#xA;&#x9;0x0106 00262 (/home/xxx/go.go:7)&#x9;CALL&#x9;fmt.Println(SB)&#xA;&#x9;0x010b 00267 (/home/xxx/go.go:9)&#x9;MOVQ&#x9;184(SP), BP&#xA;&#x9;0x0113 00275 (/home/xxx/go.go:9)&#x9;ADDQ&#x9;$192, SP&#xA;&#x9;0x011a 00282 (/home/xxx/go.go:9)&#x9;RET&#xA;&#x9;0x011b 00283 (/home/xxx/go.go:9)&#x9;NOP&#xA;&#x9;0x011b 00283 (/home/xxx/go.go:5)&#x9;PCDATA&#x9;$1, $-1&#xA;&#x9;0x011b 00283 (/home/xxx/go.go:5)&#x9;PCDATA&#x9;$0, $-1&#xA;&#x9;0x011b 00283 (/home/xxx/go.go:5)&#x9;CALL&#x9;runtime.morestack_noctxt(SB)&#xA;&#x9;0x0120 00288 (/home/xxx/go.go:5)&#x9;JMP&#x9;0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明部分&lt;/p&gt;</description>
    </item>
    <item>
      <title>[翻译]go interface</title>
      <link>https://fancive.github.io/posts/go_interface/</link>
      <pubDate>Wed, 06 May 2020 22:20:18 +0800</pubDate>
      <guid>https://fancive.github.io/posts/go_interface/</guid>
      <description>&lt;h2 id=&#34;译-go-interface-values&#34;&gt;[译] Go Interface Values&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原文 (&lt;a href=&#34;https://www.airs.com/blog/archives/281&#34;&gt;https://www.airs.com/blog/archives/281&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;原文翻译&#34;&gt;原文翻译&lt;/h2&gt;&#xA;&lt;p&gt;虽然 Go 中interface 的指是灵活的，但它们也有令人困惑的方面。&lt;/p&gt;&#xA;&lt;p&gt;接口值例如—-一个interface类型的变量—-包含其他类型的值。 interface类型被称为静态类型，因为这是编译器在编译期看到的类型。 另一种类型只在运行时可见，称为动态类型(dynamic type)。 根据定义，动态类型可以是任何除了interface的其他类型。&lt;/p&gt;&#xA;&lt;p&gt;当通过赋值或函数调用复制一个 interface 值时，你是在复制动态类型里的值。 这通常是大多数类型通常的工作方式。 但是，使用 interface 的一个非常常见的情况是将动态类型作为指针使用。 在这种情况下，当你拷贝接口时，你拷贝的其实是指针，但是你不会拷贝指针指向的值。 在许多情况下，如果方法要更改值本身, 类型(type)的方法需要使用指针作为接收方(receiver)。 当 interface 必需的方法发生这种情况时，interface 实际上要求动态类型是指针类型。&lt;/p&gt;&#xA;&lt;p&gt;这意味着，技术上来说虽然 interface 总是作为一个值拷贝，但在实际使用中，它们的行为常常好像是通过引用拷贝的。 也就是说，尽管没有显式标记，接口对象通常充当指针的角色。 这可能会让你困惑，直到你明白到底发生了什么。&lt;/p&gt;&#xA;&lt;p&gt;在我上一篇文章中提到，对于 gccgo，一个 interface 总是包含一个指向值的指针。 现在我要纠正这个错误: 如果一个程序存储了包含了指针(或者unsafe.Pointer类型) 的 interface，那么存储在 interface 中的值就是指针本身。 也就是说，gccgo 不存储指向指针的指针(这需要分配堆空间来保存指针)。 这是一种自然的高效方法，因为实际上大多数接口对象都包含指针。&lt;/p&gt;&#xA;&lt;p&gt;这种高效的方法贯穿于方法的实现。 方法总是接受指针作为接收方(receiver)参数。 如果方法的接收方(receiver)类型实际上不是指针，那么指针将隐式解引用，并在方法代码的开头复制值。 这意味着当在接口上调用方法时，存储在接口中的值可以直接传递给方法，而不管动态类型是否是指针。 (和上一篇文章一样，gc 编译器做的事情有些不同。)&lt;/p&gt;&#xA;&lt;h3 id=&#34;补充&#34;&gt;补充&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原文其实有点绕&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果 v 是一个 interface{}&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;什么是interface?&lt;/p&gt;&#xA;&lt;p&gt;Interface 同时是两种东西&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一些方法的集合&lt;/li&gt;&#xA;&lt;li&gt;它自身也是一种类型&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;interface{} type, the empty interface is the interface that has no methods.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
