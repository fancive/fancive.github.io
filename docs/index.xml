<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fancivez on home</title>
    <link>https://fancive.github.io/</link>
    <description>Recent content in fancivez on home</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 30 Jan 2025 14:07:06 +0800</lastBuildDate>
    <atom:link href="https://fancive.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从代码评审到生产部署：自动化流水线实践</title>
      <link>https://fancive.github.io/posts/automating-deployment-pipeline-from-code-review-to-production/</link>
      <pubDate>Thu, 30 Jan 2025 14:07:06 +0800</pubDate>
      <guid>https://fancive.github.io/posts/automating-deployment-pipeline-from-code-review-to-production/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在现代软件开发中，部署效率直接影响团队的整体生产力。本文分享了我们团队从手动部署到全自动化部署的实践经验，通过自动化工具将部署时间从 15 分钟缩短到 5 分钟，并完全消除了人工操作带来的错误。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wheel of Life 2024</title>
      <link>https://fancive.github.io/posts/wheel-of-life-2024/</link>
      <pubDate>Sat, 11 Jan 2025 16:26:38 +0800</pubDate>
      <guid>https://fancive.github.io/posts/wheel-of-life-2024/</guid>
      <description>&lt;blockquote&gt;&#xA;    &lt;p&gt;我让大模型读取了我的2024年每个月的月报(从周报和日记中总结)，得到了以下的生命之轮得分&lt;/p&gt;&#xA;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;h1 id=&#34;生命之轮-2024&#34;&gt;生命之轮 2024&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;wheel_of_life_2024&#34; src=&#34;https://fancive.github.io/images/img/wheel_of_life_2024.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;基于对全年12个月的完整回顾分析，我现在重新为生命之轮的八个维度进行评分：&lt;/p&gt;</description>
    </item>
    <item>
      <title>放下遗憾，拥抱自我</title>
      <link>https://fancive.github.io/posts/reflecting-on-achievements-and-regrets/</link>
      <pubDate>Tue, 07 Jan 2025 13:41:38 +0800</pubDate>
      <guid>https://fancive.github.io/posts/reflecting-on-achievements-and-regrets/</guid>
      <description>&lt;p&gt;昨晚睡前，在冥想期间，我开始从近到远回顾自己的成长历程，回忆起大学、高中、初中和小学阶段。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Llm Driven Alert Diagnosis Engine Design(设计新一代LLM驱动的告警诊断引擎)</title>
      <link>https://fancive.github.io/posts/llm-driven-alert-diagnosis-engine-design/</link>
      <pubDate>Sat, 31 Aug 2024 09:42:01 +0800</pubDate>
      <guid>https://fancive.github.io/posts/llm-driven-alert-diagnosis-engine-design/</guid>
      <description>&lt;p&gt;在当今复杂的IT环境中，快速准确地诊断和解决系统问题变得越来越具有挑战性。本文将探讨如何设计一个由大语言模型（LLM）驱动的诊断引擎，作为自动定位系统的核心组件，以智能化方式处理系统告警。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Paper reading] A Survey On Log Research Of AIOps: Methods and Trends</title>
      <link>https://fancive.github.io/posts/paper_reading_a_survey_on_log_research_of_aiops/</link>
      <pubDate>Sat, 25 Mar 2023 13:43:03 +0800</pubDate>
      <guid>https://fancive.github.io/posts/paper_reading_a_survey_on_log_research_of_aiops/</guid>
      <description>&lt;h1 id=&#34;first-pass&#34;&gt;first pass&lt;/h1&gt;&#xA;&lt;p&gt;5-10 mins&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;title, abstract, and introduction&lt;/li&gt;&#xA;&lt;li&gt;section and sub-section headings&lt;/li&gt;&#xA;&lt;li&gt;conclusions&lt;/li&gt;&#xA;&lt;li&gt;references&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>[paper reading]AIOps: Real-World Challenges and Research Innovations</title>
      <link>https://fancive.github.io/posts/paper_reading_aiops_real-world_challenges_and_research_innovations/</link>
      <pubDate>Sat, 18 Mar 2023 13:35:19 +0800</pubDate>
      <guid>https://fancive.github.io/posts/paper_reading_aiops_real-world_challenges_and_research_innovations/</guid>
      <description>&lt;h2 id=&#34;first-pass&#34;&gt;first pass&lt;/h2&gt;&#xA;&lt;p&gt;5-10 mins&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;title, abstract, and introduction&lt;/li&gt;&#xA;&lt;li&gt;section and sub-section headings&lt;/li&gt;&#xA;&lt;li&gt;conclusions&lt;/li&gt;&#xA;&lt;li&gt;references&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>我从filebeat-harvester中学到什么</title>
      <link>https://fancive.github.io/posts/what_i_learned_from_filebeat_harvester/</link>
      <pubDate>Mon, 28 Nov 2022 14:13:14 +0800</pubDate>
      <guid>https://fancive.github.io/posts/what_i_learned_from_filebeat_harvester/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在学习优秀开源项目的源码时，我们不仅能学到具体的技术实现，更能领悟到工程实践中的设计智慧。Filebeat 作为 Elastic Stack 中的日志采集器，其 Harvester 模块的设计就是一个典范。本文通过深入分析 Harvester 的协程管理机制，总结了四个核心问题的解决方案，这些经验可以直接应用到我们日常的 Go 项目开发中。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;核心问题&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如何为主协程添加超时控制？&lt;/li&gt;&#xA;&lt;li&gt;主协程结束时如何优雅关闭其他协程？&lt;/li&gt;&#xA;&lt;li&gt;如何控制多个协程的关闭顺序？&lt;/li&gt;&#xA;&lt;li&gt;如何从外部安全地关闭任务并等待清理完成？&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Filebeat 中使用的设计模式</title>
      <link>https://fancive.github.io/posts/design_pattern_used_in_filebeat/</link>
      <pubDate>Wed, 16 Sep 2020 22:15:59 +0800</pubDate>
      <guid>https://fancive.github.io/posts/design_pattern_used_in_filebeat/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;Filebeat 是 Elastic Stack 中用于收集和转发日志数据的轻量级采集器。通过深入阅读 Filebeat 的源码，我们可以学习到许多优秀的设计模式应用。本文将介绍 Filebeat 中使用的四种核心设计模式：Registry + LazyInit、Observer、Strategy 和 Object Pool，并分析它们如何帮助 Filebeat 实现高性能和良好的可扩展性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入理解 Go String 转 []byte 的容量分配机制</title>
      <link>https://fancive.github.io/posts/go_string_byte/</link>
      <pubDate>Sun, 31 May 2020 21:30:28 +0800</pubDate>
      <guid>https://fancive.github.io/posts/go_string_byte/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 Go 语言中，string 和 []byte 之间的转换是非常常见的操作。但你是否注意到，当将一个 3 字节的字符串转为 []byte 时，得到的切片容量却是 32？这背后隐藏着 Go 运行时的内存分配策略。本文将通过汇编代码分析，深入探究这个有趣的现象，帮助你理解 Go 在底层是如何处理类型转换和内存分配的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;核心问题&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为什么 &lt;code&gt;[]byte(&amp;quot;abc&amp;quot;)&lt;/code&gt; 的容量是 32 而不是 3？&lt;/li&gt;&#xA;&lt;li&gt;string 转 []byte 的底层实现是什么？&lt;/li&gt;&#xA;&lt;li&gt;Go 运行时如何进行内存分配？&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[翻译] Go Interface 深度解析</title>
      <link>https://fancive.github.io/posts/go_interface/</link>
      <pubDate>Wed, 06 May 2020 22:20:18 +0800</pubDate>
      <guid>https://fancive.github.io/posts/go_interface/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;Interface 是 Go 语言最强大的特性之一，但同时也是最容易让人困惑的部分。本文翻译自 Ian Lance Taylor 的博客文章，深入探讨了 Go interface 的内部实现机制，帮助你理解 interface 的静态类型、动态类型以及值拷贝的工作原理。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;核心要点&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface 同时具有静态类型和动态类型&lt;/li&gt;&#xA;&lt;li&gt;Interface 的值拷贝行为&lt;/li&gt;&#xA;&lt;li&gt;Interface 的内部数据结构（itable）&lt;/li&gt;&#xA;&lt;li&gt;指针接收者与值接收者的区别&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;原文链接：https://www.airs.com/blog/archives/281&lt;/p&gt;&#xA;&#xA;  &lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Contact</title>
      <link>https://fancive.github.io/contact/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://fancive.github.io/contact/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/fancive&#34; target=&#34;_blank&#34;&gt;github.com/fancive&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
