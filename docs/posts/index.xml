<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on home</title>
    <link>https://fancive.github.io/posts/</link>
    <description>Recent content in Posts on home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Aug 2024 09:42:01 +0800</lastBuildDate><atom:link href="https://fancive.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Llm Driven Alert Diagnosis Engine Design(设计新一代LLM驱动的告警诊断引擎)</title>
      <link>https://fancive.github.io/posts/llm-driven-alert-diagnosis-engine-design/</link>
      <pubDate>Sat, 31 Aug 2024 09:42:01 +0800</pubDate>
      
      <guid>https://fancive.github.io/posts/llm-driven-alert-diagnosis-engine-design/</guid>
      <description>在当今复杂的IT环境中，快速准确地诊断和解决系统问题变得越来越具有挑战性。本文将探讨如何设计一个革命性的、由大语言模型（LLM）驱动的诊断引擎，作为自动定位系统的核心组件，以智能化方式处理系统告警。
引言 随着系统规模和复杂性的增加，传统的基于规则的告警诊断方法往往力不从心。我们需要一种更智能、更灵活的方法来分析和诊断系统告警。这就是LLM驱动的诊断引擎发挥作用的地方。
宏观系统架构：自动定位系统 在深入探讨LLM驱动的诊断引擎之前，让我们先了解它在整个自动定位系统中的位置。自动定位系统是一个复杂的生态系统，旨在自动检测、诊断和解决IT环境中的问题。以下是系统的宏观架构：
var config = { startOnLoad: true, theme: &#39;neutral&#39;, align: &#39;left&#39; }; mermaid.initialize(config);  graph TB A[监控系统] --|告警| B[告警聚合器] B --|结构化告警| C[LLM驱动的诊断引擎] D[日志系统] --|相关日志| C E[配置管理数据库] --|系统配置| C F[知识库] --|历史案例| C C --|诊断结果| G[自动修复系统] C --|诊断报告| H[运维仪表板] I[人工反馈] --|优化信息| C  以Elasticsearch作为数据源为例:
var config = { startOnLoad: true, theme: &#39;neutral&#39;, align: &#39;left&#39; }; mermaid.initialize(config);  sequenceDiagram participant ES as Elasticsearch participant AR as 告警规则执行器 participant AM as 告警管理器 participant LLM as LLM诊断引擎 participant NT as 通知系统 loop 定期执行 AR-ES: 执行查询表达式 ES--AR: 返回查询结果 AR-AR: 应用时间窗口和阈值 alt 触发告警条件 AR-AM: 生成告警 AM-LLM: 请求诊断 LLM-LLM: 分析告警上下文 LLM--AM: 返回诊断结果 AM-NT: 发送通知 end end  在这个宏观架构中，LLM驱动的诊断引擎扮演着核心角色：</description>
    </item>
    
    <item>
      <title>[Paper reading] A Survey On Log Research Of AIOps: Methods and Trends</title>
      <link>https://fancive.github.io/posts/paper_reading_a_survey_on_log_research_of_aiops/</link>
      <pubDate>Sat, 25 Mar 2023 13:43:03 +0800</pubDate>
      
      <guid>https://fancive.github.io/posts/paper_reading_a_survey_on_log_research_of_aiops/</guid>
      <description>link: https://dl.acm.org/doi/abs/10.1007/s11036-021-01832-3  first pass 5-10 mins
 title, abstract, and introduction section and sub-section headings conclusions references  question Category: What type of paper is this? A measurement paper? An analysis of an existing system? A description of a research prototype?
It’s a survey paper on the methods and trend on log based AIOps.
It does not seem to focus on a specific system or prototype, but rather explore the current state of research in the field.</description>
    </item>
    
    <item>
      <title>[paper reading]AIOps: Real-World Challenges and Research Innovations</title>
      <link>https://fancive.github.io/posts/paper_reading_aiops_real-world_challenges_and_research_innovations/</link>
      <pubDate>Sat, 18 Mar 2023 13:35:19 +0800</pubDate>
      
      <guid>https://fancive.github.io/posts/paper_reading_aiops_real-world_challenges_and_research_innovations/</guid>
      <description>link: https://ieeexplore.ieee.org/abstract/document/8802836  first pass 5-10 mins
 title, abstract, and introduction section and sub-section headings conclusions references  question Category: What type of paper is this? A measurement paper? An analysis of an existing system? A description of a research prototype?
It is a descriptive paper that discusses the challenges and innovations related to the implementation of AIOps in real-world IT operations.
Context: Which other papers is it related to?</description>
    </item>
    
    <item>
      <title>我从filebeat-harvester中学到什么</title>
      <link>https://fancive.github.io/posts/what_i_learned_from_filebeat_harvester/</link>
      <pubDate>Mon, 28 Nov 2022 14:13:14 +0800</pubDate>
      
      <guid>https://fancive.github.io/posts/what_i_learned_from_filebeat_harvester/</guid>
      <description>总体流程 filebeat 对每个path都会创建一个 harvester, harvester 负责逐行读取文件内容。它的上游是 input , input 负责管理harvester, 它的下游是 output, output 负责消费每一行消息。
通过阅读harvester代码，我学习到了如何管理多个相互依赖的协程的生命周期，具体可以拆分为4个问题
 为主协程添加超时控制协程 主协程结束如何关闭超时控制协程和其他协程(monitorFileSize) 关闭协程时如何控制不同job间的先后执行顺序 如何从外部关闭任务，并等待清理完成  超时控制协程 (h *Harvester)Run() 方法里，会创建超时控制协程，在此协程中会消费2个事件
 超时事件 closeTimeout 主任务结束标志 h.done  一旦接收到其中一个事件，那么会调用 stop 并关闭 reader
// Closes reader after timeout or when done channel is closed 	// This routine is also responsible to properly stop the reader go func(source string) {  closeTimeout := make(&amp;lt;-chan time.Time)  // starts close_timeout timer  if h.</description>
    </item>
    
    <item>
      <title>filebeat中使用的设计模式</title>
      <link>https://fancive.github.io/posts/design_pattern_used_in_filebeat/</link>
      <pubDate>Wed, 16 Sep 2020 22:15:59 +0800</pubDate>
      
      <guid>https://fancive.github.io/posts/design_pattern_used_in_filebeat/</guid>
      <description>registry 与 lazyinit 结合 filebeat/input.New
f, err = GetFactory(input.config.Type) GetFactory
func GetFactory(name string) (Factory, error) {  if _, exists := registry[name]; !exists {  return nil, fmt.Errorf(&amp;#34;Error creating input. No such input type exist: &amp;#39;%v&amp;#39;&amp;#34;, name)  }  return registry[name], nil } 注册
func init() {  err := input.Register(&amp;#34;log&amp;#34;, NewInput)  if err != nil {  panic(err)  } } observer publish
func (b *bus) Publish(e Event) {  b.</description>
    </item>
    
    <item>
      <title>go string to byte</title>
      <link>https://fancive.github.io/posts/go_string_byte/</link>
      <pubDate>Sun, 31 May 2020 21:30:28 +0800</pubDate>
      
      <guid>https://fancive.github.io/posts/go_string_byte/</guid>
      <description>0x01 背景 最近在review其他同学代码发现将 string转[]byte的时候，得到的[]byte的容量是会变的, 比如如下一段代码的输出是32
func main() { 	s1 := &amp;#34;abc&amp;#34; 	fmt.Println(cap([]byte(s1))) } 0x02 探究 那么这是为什么呢，首先看汇编
 -N 禁止优化 -S 输出汇编代码 -l 禁止内联
 go build -gcflags=&amp;#34;-N -l -S&amp;#34; go.go 得到以下代码
&amp;#34;&amp;#34;.main STEXT size=293 args=0x0 locals=0xc0 0x0000 00000 (/home/xxx/go.go:5)	TEXT	&amp;#34;&amp;#34;.main(SB), ABIInternal, $192-0 0x0000 00000 (/home/xxx/go.go:5)	MOVQ	(TLS), CX 0x0009 00009 (/home/xxx/go.go:5)	LEAQ	-64(SP), AX 0x000e 00014 (/home/xxx/go.go:5)	CMPQ	AX, 16(CX) 0x0012 00018 (/home/xxx/go.go:5)	JLS	283 0x0018 00024 (/home/xxx/go.</description>
    </item>
    
    <item>
      <title>[翻译]go interface</title>
      <link>https://fancive.github.io/posts/go_interface/</link>
      <pubDate>Wed, 06 May 2020 22:20:18 +0800</pubDate>
      
      <guid>https://fancive.github.io/posts/go_interface/</guid>
      <description>[译] Go Interface Values  原文 (https://www.airs.com/blog/archives/281)
 原文翻译 虽然 Go 中interface 的指是灵活的，但它们也有令人困惑的方面。
接口值例如—-一个interface类型的变量—-包含其他类型的值。 interface类型被称为静态类型，因为这是编译器在编译期看到的类型。 另一种类型只在运行时可见，称为动态类型(dynamic type)。 根据定义，动态类型可以是任何除了interface的其他类型。
当通过赋值或函数调用复制一个 interface 值时，你是在复制动态类型里的值。 这通常是大多数类型通常的工作方式。 但是，使用 interface 的一个非常常见的情况是将动态类型作为指针使用。 在这种情况下，当你拷贝接口时，你拷贝的其实是指针，但是你不会拷贝指针指向的值。 在许多情况下，如果方法要更改值本身, 类型(type)的方法需要使用指针作为接收方(receiver)。 当 interface 必需的方法发生这种情况时，interface 实际上要求动态类型是指针类型。
这意味着，技术上来说虽然 interface 总是作为一个值拷贝，但在实际使用中，它们的行为常常好像是通过引用拷贝的。 也就是说，尽管没有显式标记，接口对象通常充当指针的角色。 这可能会让你困惑，直到你明白到底发生了什么。
在我上一篇文章中提到，对于 gccgo，一个 interface 总是包含一个指向值的指针。 现在我要纠正这个错误: 如果一个程序存储了包含了指针(或者unsafe.Pointer类型) 的 interface，那么存储在 interface 中的值就是指针本身。 也就是说，gccgo 不存储指向指针的指针(这需要分配堆空间来保存指针)。 这是一种自然的高效方法，因为实际上大多数接口对象都包含指针。
这种高效的方法贯穿于方法的实现。 方法总是接受指针作为接收方(receiver)参数。 如果方法的接收方(receiver)类型实际上不是指针，那么指针将隐式解引用，并在方法代码的开头复制值。 这意味着当在接口上调用方法时，存储在接口中的值可以直接传递给方法，而不管动态类型是否是指针。 (和上一篇文章一样，gc 编译器做的事情有些不同。)
补充  原文其实有点绕
  如果 v 是一个 interface{}
 什么是interface?
Interface 同时是两种东西
 一些方法的集合 它自身也是一种类型   interface{} type, the empty interface is the interface that has no methods.</description>
    </item>
    
  </channel>
</rss>
